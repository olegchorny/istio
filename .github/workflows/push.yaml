name: Push Action
on:
  push:
    branches:
    - master

jobs:
  build_productpage:
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v1
    - name: Build 
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        docker build -t docker.pkg.github.com/$GITHUB_REPOSITORY/productpage:$sha $GITHUB_WORKSPACE/samples/bookinfo/src/productpage
    - name: Push 
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        docker login docker.pkg.github.com -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
        docker push docker.pkg.github.com/$GITHUB_REPOSITORY/productpage:$sha
  build_ratings:
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v1
    - name: Build 
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        docker build -t docker.pkg.github.com/$GITHUB_REPOSITORY/ratings:$sha $GITHUB_WORKSPACE/samples/bookinfo/src/ratings
    - name: Push 
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        docker login docker.pkg.github.com -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
        docker push docker.pkg.github.com/$GITHUB_REPOSITORY/ratings:$sha
  build_details:
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v1
    - name: Build 
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        docker build -t docker.pkg.github.com/$GITHUB_REPOSITORY/details:$sha $GITHUB_WORKSPACE/samples/bookinfo/src/details
    - name: Push 
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        docker login docker.pkg.github.com -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
        docker push docker.pkg.github.com/$GITHUB_REPOSITORY/details:$sha
  build_reviews:
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v1
    - name: Build 
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        cd $GITHUB_WORKSPACE/samples/bookinfo/src/reviews && gradle build
        docker build -t docker.pkg.github.com/$GITHUB_REPOSITORY/reviews:$sha $GITHUB_WORKSPACE/samples/bookinfo/src/reviews/reviews-wlpcfg
    - name: Push 
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        docker login docker.pkg.github.com -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
        docker push docker.pkg.github.com/$GITHUB_REPOSITORY/reviews:$sha
        
  deploy:
    runs-on: ubuntu-latest
    needs: [build_productpage, build_reviews, build_details, build_ratings]
    steps:
    - name: Setup python
      uses: actions/setup-python@v1 
      with:
        python-version: '3.x'
        architecture: 'x64' 
    - name: VKS context
      uses: ventus-ag/vks-action@master
      with: 
        authUrl: ${{ secrets.URL }}
        projectName: ${{ secrets.PROJECT }}
        domainName: ${{ secrets.DOMAIN }}
        userName: ${{ secrets.USER }}
        userDomainName: ${{ secrets.USERDOMAIN }}
        userPassword: ${{ secrets.PASSWORD }}
        clusterName: ${{ secrets.CLUSTER }}
    - name: Setup docker registry secret 
      uses: azure/k8s-actions/k8s-create-secret@master
      with:
        container-registry-url: docker.pkg.github.com
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: registry-secret
    - name: Patch service account to use imagePullSecret
      run: |
        kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "registry-secret"}]}'
    - name: Deploy Productpage
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        kubectl create deployment $app --image=docker.pkg.github.com/$GITHUB_REPOSITORY/productpage:$sha --dry-run -o yaml | kubectl apply -f -    
    - name: Deploy Details
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        kubectl create deployment $app --image=docker.pkg.github.com/$GITHUB_REPOSITORY/details:$sha --dry-run -o yaml | kubectl apply -f -    
    - name: Deploy Ratings
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        kubectl create deployment $app --image=docker.pkg.github.com/$GITHUB_REPOSITORY/ratings:$sha --dry-run -o yaml | kubectl apply -f -    
    - name: Deploy Reviews
      run: |
        sha=${GITHUB_SHA:0:7}
        app="${GITHUB_REPOSITORY#*/}"
        kubectl create deployment $app --image=docker.pkg.github.com/$GITHUB_REPOSITORY/reviews:$sha --dry-run -o yaml | kubectl apply -f -
    - name: Sleep for 60 seconds
      uses: jakejarvis/wait-action@master
      with:
        time: '60s'
    - name: Check
      run: |
        kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}') -c ratings -- curl productpage:9080/productpage | grep -o "<title>.*</title>"
        kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}') -c ratings -- curl productpage:9080/productpage | grep -o "William Shakespeare"
        kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}') -c ratings -- curl productpage:9080/productpage | grep -o "Reviewer1"
  
#   test:
#     runs-on: ubuntu-latest
#     needs: [deploy]
#     steps:
#     - name: Sleep for 60 seconds
#       uses: jakejarvis/wait-action@master
#       with:
#         time: '60s'
#     - name: Check
#       run: |
#         export KUBECONFIG="$(kind get kubeconfig-path)"
#         kubectl get pods --all-namespaces
#         kubectl get pods -o yaml
#         kubectl get svc --all-namespaces
#         kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}') -c ratings -- curl productpage:9080/productpage | grep -o "<title>.*</title>"
#         kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}') -c ratings -- curl productpage:9080/productpage | grep -o "William Shakespeare"
#         kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}') -c ratings -- curl productpage:9080/productpage | grep -o "Reviewer1"
